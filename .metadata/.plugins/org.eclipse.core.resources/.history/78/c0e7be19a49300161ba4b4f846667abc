package hr.fer.zemris.optjava.dz2;

import Jama.Matrix;

public class NumOptAlgorithms {
	
	private static final double EPSILON = 1;
	private static IFunction funkcija;
	private static double[] rjesenje;
	private static double[] smjerPretrage;
	

	public static void algoritamGradijentnogSpusta(final IFunction funkcija, int brIter) {
		
		NumOptAlgorithms.funkcija = funkcija;
		rjesenje = new double[funkcija.vratiBrojVarijabli()]; //fali jos

		double lambda;
		
		for(int k = 0; k < brIter; k++) {
			
			smjerPretrage = utvrdiSmjerPretrage();
			lambda = pronadiKorak();
			
			for(int i = 0; i < rjesenje.length; i++) {
				rjesenje[i] = rjesenje[i] + lambda*smjerPretrage[i];
			}
			
		}
		
	}

	private static double pronadiKorak() {
		
		
		double lambdaDonja = 0;
		double lambdaGornja = 1;
		double  derivacijaFunkcijeθ; //θ(λ) = f(x + λ·d)
		
		while(true) {
			
			derivacijaFunkcijeθ = derivacijaFunkcije();
			
			if(derivacijaFunkcijeθ > 0) {
				break;
			}
			lambdaGornja *=2;
			
		}
		
		return metodaBisekcije(lambdaDonja, lambdaGornja);
	}

	private static double derivacijaFunkcije() {
		double derivacijaFunkcijeθ;
		derivacijaFunkcijeθ = 0;
		double[] gradijent = funkcija.vratiVrijednostGradijentaNa(rjesenje);
		for(int i = 0, n = funkcija.vratiBrojVarijabli(); i < n; i++) {
			derivacijaFunkcijeθ += gradijent[i]*smjerPretrage[i];
		}
		return derivacijaFunkcijeθ;
	}

	private static double metodaBisekcije(double lambdaDonja, double lambdaGornja) {
		
		double lambda;
		double  derivacijaFunkcijeθ;
		return 0;
	}

	private static double[] utvrdiSmjerPretrage() {
		
		double[] gradijent = funkcija.vratiVrijednostGradijentaNa(rjesenje);
		for(int i = 0; i < gradijent.length; i++) {
			gradijent[i] = -gradijent[i];
		}
		return gradijent;

	}
	
}
