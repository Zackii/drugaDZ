package hr.fer.zemris.optjava.dz2;

import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;

public class Funkcija4 implements IHFunction {

	private static final int BROJ_VARIJABLI = 6;
	private static final int INDEKS_VRIJEDNOSTI_FUNKCIJE = 10;
	
	private double[][] varijable;
	
	public Funkcija4(String putDatoteke) {
		varijable = new CitacSustavaLinJedn(putDatoteke).vratiKoeficijente();	
	}
	
	@Override
	public int vratiBrojVarijabli() {
		return BROJ_VARIJABLI;
	}

	@Override
	public double vratiVrijednostU(RealVector vektor) {
		double[] poljeKonstanti = vektor.toArray();
		double vrijednostIteLinJedn;
		double sumaRazlikeKvadrata = 0;
		
		for(int i = 0; i < BROJ_VARIJABLI; i++) {
			vrijednostIteLinJedn = vrijednostIteLinJednZaDanoPoljeXa(varijable[i], poljeKonstanti);
			sumaRazlikeKvadrata = Math.pow(vrijednostIteLinJedn - varijable[i][INDEKS_VRIJEDNOSTI_FUNKCIJE], 2);
		}
		
		return sumaRazlikeKvadrata;
	}

	private double vrijednostIteLinJednZaDanoPoljeXa(double[] x, double[] k) {
		return k[0]*x[0] + k[1]*Math.pow(x[0], 3)*x[1] + k[2]*Math.pow(Math.E, k[3]*x[2])*(1 + Math.cos(k[4]*x[3])) + k[5]*x[3]*Math.pow(x[4], 2);
	}

	@Override
	public RealVector vratiVrijednostGradijentaU(RealVector vector) {
		double[] poljeKonstanti = vector.toArray();
		double[] gradijent = new double[BROJ_VARIJABLI];
		
		izracunajGradijent(poljeKonstanti, gradijent, varijable);
		
		return new ArrayRealVector(gradijent);
	}

	private void izracunajGradijent(double[] pk, double[] gradijent, double[][] var) {
		
		gradijent[0] = vrijednostParcijalneDerivacijePoKonstanti((i) -> var[i][0]);
		
		gradijent[1] = vrijednostParcijalneDerivacijePoKonstanti((i) -> Math.pow(var[i][0], 3)*var[i][1]);
		
		gradijent[2] = vrijednostParcijalneDerivacijePoKonstanti((i) -> Math.pow(Math.E,  pk[3]*var[i][2])*(1 + Math.cos(pk[4]*var[i][3])));
		
		gradijent[3] = vrijednostParcijalneDerivacijePoKonstanti((i) -> pk[2]*var[i][2]*Math.pow(Math.E,  pk[3]*var[i][2])*(1 + Math.cos(pk[4]*var[i][3])));
		
		gradijent[4] = vrijednostParcijalneDerivacijePoKonstanti((i) -> -var[i][3]*pk[2]*Math.pow(Math.E,  pk[3]*var[i][2])*(1 + Math.sin(pk[4]*var[i][3])));
		
		gradijent[5] = vrijednostParcijalneDerivacijePoKonstanti((i) -> var[i][3]*Math.pow(var[i][4], 2));
		
		
	}

	private double vrijednostParcijalneDerivacijePoKonstanti(IVrijednostParcijalneDerivacije vpd) {
		double vrijednost = 0;
		for(int i = 0; i < BROJ_VARIJABLI; i++) {
			vrijednost += vpd.izracunajZaVarijabluIKonstantu(i);
		}
		return vrijednost;
	}

	@Override
	public RealMatrix vratiVrijednostHesseoveMatriceU(RealVector vector) {
		double[] poljeKonstanti = vector.toArray();
		double[][] hesseovaMatrica = new double[BROJ_VARIJABLI][BROJ_VARIJABLI];
		
		izracunajHesseovuMatricu(poljeKonstanti, hesseovaMatrica, varijable);
		
		return new Array2DRowRealMatrix(hesseovaMatrica);
	}

	private void izracunajHesseovuMatricu(double[] pk, double[][] hesseovaMatrica, double[][] var) {
		
		gradijent[0] = vrijednostParcijalneDerivacijePoKonstanti((i) -> var[i][0]);
		
		gradijent[1] = vrijednostParcijalneDerivacijePoKonstanti((i) -> Math.pow(var[i][0], 3)*var[i][1]);
		
		gradijent[2] = vrijednostParcijalneDerivacijePoKonstanti((i) -> Math.pow(Math.E,  pk[3]*var[i][2])*(1 + Math.cos(pk[4]*var[i][3])));
		
		gradijent[3] = vrijednostParcijalneDerivacijePoKonstanti((i) -> pk[2]*var[i][2]*Math.pow(Math.E,  pk[3]*var[i][2])*(1 + Math.cos(pk[4]*var[i][3])));
		
		gradijent[4] = vrijednostParcijalneDerivacijePoKonstanti((i) -> -var[i][3]*pk[2]*Math.pow(Math.E,  pk[3]*var[i][2])*(1 + Math.sin(pk[4]*var[i][3])));
		
		gradijent[5] = vrijednostParcijalneDerivacijePoKonstanti((i) -> var[i][3]*Math.pow(var[i][4], 2));
		
	}
	
	
	
}
